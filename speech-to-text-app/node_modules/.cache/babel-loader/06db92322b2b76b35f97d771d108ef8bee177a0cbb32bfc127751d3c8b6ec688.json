{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  transcript: '',\n  isListening: false,\n  translatedText: ''\n};\nconst speechSlice = createSlice({\n  name: 'speech',\n  initialState,\n  reducers: {\n    startListening: state => {\n      state.isListening = true;\n    },\n    stopListening: state => {\n      state.isListening = false;\n    },\n    updateTranscript: (state, action) => {\n      state.transcript = action.payload;\n    },\n    updateTranslatedText: (state, action) => {\n      state.translatedText = action.payload;\n    },\n    resetTranscript: state => {\n      state.transcript = '';\n      state.translatedText = '';\n    }\n  }\n});\nexport const {\n  startListening,\n  stopListening,\n  updateTranscript,\n  updateTranslatedText,\n  resetTranscript\n} = speechSlice.actions;\n\n// Thunk for translating text using MyMemory API\nexport const translateText = (text, targetLanguage) => async dispatch => {\n  try {\n    // Construct the API URL\n    const response = await axios.get(`https://api.mymemory.translated.net/get`, {\n      params: {\n        q: text,\n        langpair: `en|${targetLanguage}` // Replace 'en' with the source language code if needed\n      }\n    });\n    // Update the translated text in the state\n    dispatch(updateTranslatedText(response.data.responseData.translatedText));\n  } catch (error) {\n    console.error('Translation error:', error);\n  }\n};\nexport default speechSlice.reducer;","map":{"version":3,"names":["createSlice","axios","initialState","transcript","isListening","translatedText","speechSlice","name","reducers","startListening","state","stopListening","updateTranscript","action","payload","updateTranslatedText","resetTranscript","actions","translateText","text","targetLanguage","dispatch","response","get","params","q","langpair","data","responseData","error","console","reducer"],"sources":["E:/personal Applications/speach to text converter/speech-to-text-app/src/store/speechSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst initialState = {\r\n  transcript: '',\r\n  isListening: false,\r\n  translatedText: '',\r\n};\r\n\r\nconst speechSlice = createSlice({\r\n  name: 'speech',\r\n  initialState,\r\n  reducers: {\r\n    startListening: (state) => {\r\n      state.isListening = true;\r\n    },\r\n    stopListening: (state) => {\r\n      state.isListening = false;\r\n    },\r\n    updateTranscript: (state, action) => {\r\n      state.transcript = action.payload;\r\n    },\r\n    updateTranslatedText: (state, action) => {\r\n      state.translatedText = action.payload;\r\n    },\r\n    resetTranscript: (state) => {\r\n      state.transcript = '';\r\n      state.translatedText = '';\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  startListening,\r\n  stopListening,\r\n  updateTranscript,\r\n  updateTranslatedText,\r\n  resetTranscript,\r\n} = speechSlice.actions;\r\n\r\n// Thunk for translating text using MyMemory API\r\nexport const translateText = (text, targetLanguage) => async (dispatch) => {\r\n  try {\r\n    // Construct the API URL\r\n    const response = await axios.get(`https://api.mymemory.translated.net/get`, {\r\n      params: {\r\n        q: text,\r\n        langpair: `en|${targetLanguage}`, // Replace 'en' with the source language code if needed\r\n      },\r\n    });\r\n    // Update the translated text in the state\r\n    dispatch(updateTranslatedText(response.data.responseData.translatedText));\r\n  } catch (error) {\r\n    console.error('Translation error:', error);\r\n  }\r\n};\r\n\r\nexport default speechSlice.reducer;\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,EAAE;EACdC,WAAW,EAAE,KAAK;EAClBC,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,WAAW,GAAGN,WAAW,CAAC;EAC9BO,IAAI,EAAE,QAAQ;EACdL,YAAY;EACZM,QAAQ,EAAE;IACRC,cAAc,EAAGC,KAAK,IAAK;MACzBA,KAAK,CAACN,WAAW,GAAG,IAAI;IAC1B,CAAC;IACDO,aAAa,EAAGD,KAAK,IAAK;MACxBA,KAAK,CAACN,WAAW,GAAG,KAAK;IAC3B,CAAC;IACDQ,gBAAgB,EAAEA,CAACF,KAAK,EAAEG,MAAM,KAAK;MACnCH,KAAK,CAACP,UAAU,GAAGU,MAAM,CAACC,OAAO;IACnC,CAAC;IACDC,oBAAoB,EAAEA,CAACL,KAAK,EAAEG,MAAM,KAAK;MACvCH,KAAK,CAACL,cAAc,GAAGQ,MAAM,CAACC,OAAO;IACvC,CAAC;IACDE,eAAe,EAAGN,KAAK,IAAK;MAC1BA,KAAK,CAACP,UAAU,GAAG,EAAE;MACrBO,KAAK,CAACL,cAAc,GAAG,EAAE;IAC3B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXI,cAAc;EACdE,aAAa;EACbC,gBAAgB;EAChBG,oBAAoB;EACpBC;AACF,CAAC,GAAGV,WAAW,CAACW,OAAO;;AAEvB;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,IAAI,EAAEC,cAAc,KAAK,MAAOC,QAAQ,IAAK;EACzE,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,yCAAyC,EAAE;MAC1EC,MAAM,EAAE;QACNC,CAAC,EAAEN,IAAI;QACPO,QAAQ,EAAE,MAAMN,cAAc,EAAE,CAAE;MACpC;IACF,CAAC,CAAC;IACF;IACAC,QAAQ,CAACN,oBAAoB,CAACO,QAAQ,CAACK,IAAI,CAACC,YAAY,CAACvB,cAAc,CAAC,CAAC;EAC3E,CAAC,CAAC,OAAOwB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC5C;AACF,CAAC;AAED,eAAevB,WAAW,CAACyB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}