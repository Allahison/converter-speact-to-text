{"ast":null,"code":"var _jsxFileName = \"E:\\\\personal Applications\\\\speach to text converter\\\\speech-to-text-app\\\\src\\\\components\\\\SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { startListening, stopListening, updateTranscript, resetTranscript, translateText } from '../store/speechSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true;\nconst SpeechToText = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    transcript,\n    isListening,\n    translatedText\n  } = useSelector(state => state.speech);\n  const [targetLanguage, setTargetLanguage] = useState('es'); // Default to Spanish\n  const [pastedText, setPastedText] = useState('');\n  useEffect(() => {\n    if (isListening) {\n      recognition.start();\n      recognition.onresult = event => {\n        const transcriptText = Array.from(event.results).map(result => result[0].transcript).join('');\n        dispatch(updateTranscript(transcriptText));\n      };\n      recognition.onerror = event => {\n        console.error(\"Speech recognition error:\", event.error);\n      };\n    } else {\n      recognition.stop();\n    }\n  }, [isListening, dispatch]);\n\n  // Translate whenever transcript updates or pasted text changes\n  useEffect(() => {\n    if (transcript) {\n      dispatch(translateText(transcript, targetLanguage));\n    }\n    if (pastedText) {\n      dispatch(translateText(pastedText, targetLanguage));\n    }\n  }, [transcript, pastedText, targetLanguage, dispatch]);\n  const handleStart = () => {\n    dispatch(startListening());\n  };\n  const handleStop = () => {\n    dispatch(stopListening());\n  };\n  const handleReset = () => {\n    dispatch(resetTranscript());\n    setPastedText(''); // Reset pasted text\n  };\n  const handleLanguageChange = e => {\n    setTargetLanguage(e.target.value);\n  };\n  const handlePaste = e => {\n    const text = e.target.value;\n    setPastedText(text); // Update pasted text state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speech-to-text-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Speech to Text Converter with Translation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStart,\n        disabled: isListening,\n        children: \"Start Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStop,\n        disabled: !isListening,\n        children: \"Stop Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"language-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Target Language:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: targetLanguage,\n        onChange: handleLanguageChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"es\",\n          children: \"Spanish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"fr\",\n          children: \"French\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"de\",\n          children: \"German\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"zh\",\n          children: \"Chinese\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ar\",\n          children: \"Arabic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ur\",\n          children: \"Urdu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      readOnly: true,\n      value: transcript,\n      placeholder: \"Your speech will appear here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: pastedText,\n      onChange: handlePaste,\n      placeholder: \"Paste text to translate here...\",\n      rows: \"4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      readOnly: true,\n      value: translatedText,\n      placeholder: \"Translated text will appear here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"C6EaLpGJOnMUWFt+U4W+E/azpeQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","startListening","stopListening","updateTranscript","resetTranscript","translateText","jsxDEV","_jsxDEV","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","interimResults","SpeechToText","_s","dispatch","transcript","isListening","translatedText","state","speech","targetLanguage","setTargetLanguage","pastedText","setPastedText","start","onresult","event","transcriptText","Array","from","results","map","result","join","onerror","console","error","stop","handleStart","handleStop","handleReset","handleLanguageChange","e","target","value","handlePaste","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","onChange","readOnly","placeholder","rows","_c","$RefreshReg$"],"sources":["E:/personal Applications/speach to text converter/speech-to-text-app/src/components/SpeechToText.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { startListening, stopListening, updateTranscript, resetTranscript, translateText } from '../store/speechSlice';\r\n\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\nconst recognition = new SpeechRecognition();\r\nrecognition.continuous = true;\r\nrecognition.interimResults = true;\r\n\r\nconst SpeechToText = () => {\r\n  const dispatch = useDispatch();\r\n  const { transcript, isListening, translatedText } = useSelector((state) => state.speech);\r\n  const [targetLanguage, setTargetLanguage] = useState('es'); // Default to Spanish\r\n  const [pastedText, setPastedText] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (isListening) {\r\n      recognition.start();\r\n\r\n      recognition.onresult = (event) => {\r\n        const transcriptText = Array.from(event.results)\r\n          .map(result => result[0].transcript)\r\n          .join('');\r\n        dispatch(updateTranscript(transcriptText));\r\n      };\r\n\r\n      recognition.onerror = (event) => {\r\n        console.error(\"Speech recognition error:\", event.error);\r\n      };\r\n    } else {\r\n      recognition.stop();\r\n    }\r\n  }, [isListening, dispatch]);\r\n\r\n  // Translate whenever transcript updates or pasted text changes\r\n  useEffect(() => {\r\n    if (transcript) {\r\n      dispatch(translateText(transcript, targetLanguage));\r\n    }\r\n    if (pastedText) {\r\n      dispatch(translateText(pastedText, targetLanguage));\r\n    }\r\n  }, [transcript, pastedText, targetLanguage, dispatch]);\r\n\r\n  const handleStart = () => {\r\n    dispatch(startListening());\r\n  };\r\n\r\n  const handleStop = () => {\r\n    dispatch(stopListening());\r\n  };\r\n\r\n  const handleReset = () => {\r\n    dispatch(resetTranscript());\r\n    setPastedText(''); // Reset pasted text\r\n  };\r\n\r\n  const handleLanguageChange = (e) => {\r\n    setTargetLanguage(e.target.value);\r\n  };\r\n\r\n  const handlePaste = (e) => {\r\n    const text = e.target.value;\r\n    setPastedText(text); // Update pasted text state\r\n  };\r\n\r\n  return (\r\n    <div className=\"speech-to-text-container\">\r\n      <h2>Speech to Text Converter with Translation</h2>\r\n      <div className=\"controls\">\r\n        <button onClick={handleStart} disabled={isListening}>Start Listening</button>\r\n        <button onClick={handleStop} disabled={!isListening}>Stop Listening</button>\r\n        <button onClick={handleReset}>Reset Transcript</button>\r\n      </div>\r\n      <div className=\"language-selector\">\r\n        <label>Select Target Language:</label>\r\n        <select value={targetLanguage} onChange={handleLanguageChange}>\r\n          <option value=\"es\">Spanish</option>\r\n          <option value=\"fr\">French</option>\r\n          <option value=\"de\">German</option>\r\n          <option value=\"zh\">Chinese</option>\r\n          <option value=\"ar\">Arabic</option>\r\n          <option value=\"ur\">Urdu</option> {/* Added Urdu option */}\r\n        </select>\r\n      </div>\r\n      <textarea readOnly value={transcript} placeholder=\"Your speech will appear here...\" />\r\n      <textarea\r\n        value={pastedText}\r\n        onChange={handlePaste}\r\n        placeholder=\"Paste text to translate here...\"\r\n        rows=\"4\"\r\n      />\r\n      <textarea readOnly value={translatedText} placeholder=\"Translated text will appear here...\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechToText;\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}