{"ast":null,"code":"var _jsxFileName = \"E:\\\\personal Applications\\\\speach to text converter\\\\speech-to-text-app\\\\src\\\\store\\\\speechSlice.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechSlice = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [translatedText, setTranslatedText] = useState('');\n  const [sourceLang, setSourceLang] = useState('en'); // Default source language\n  const [targetLang, setTargetLang] = useState('es'); // Default target language\n  const [isListening, setIsListening] = useState(false);\n  const [recognition, setRecognition] = useState(null);\n  useEffect(() => {\n    // Check for browser compatibility\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const newRecognition = new SpeechRecognition();\n      newRecognition.continuous = true; // Keep recognizing speech\n      newRecognition.interimResults = true; // Show interim results\n\n      newRecognition.onresult = event => {\n        const currentText = event.results[event.resultIndex][0].transcript;\n        setText(currentText);\n      };\n      newRecognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n      };\n      setRecognition(newRecognition);\n    } else {\n      alert('Speech recognition is not supported in your browser.');\n    }\n  }, []);\n  const startListening = () => {\n    if (recognition) {\n      recognition.start();\n      setIsListening(true);\n    }\n  };\n  const stopListening = () => {\n    if (recognition) {\n      recognition.stop();\n      setIsListening(false);\n    }\n  };\n  const translateText = async () => {\n    if (!text) return; // Do not translate if there's no text\n\n    try {\n      const response = await fetch('https://libretranslate.com/translate', {\n        method: 'POST',\n        body: JSON.stringify({\n          q: text,\n          source: sourceLang,\n          target: targetLang\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      setTranslatedText(data.translatedText);\n    } catch (error) {\n      console.error('Error translating text:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SpeechSlice - Speech to Translate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isListening ? stopListening : startListening,\n      children: isListening ? 'Stop Listening' : 'Start Listening'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"4\",\n      cols: \"50\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Spoken text will appear here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: translateText,\n      children: \"Translate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Translated Text:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: translatedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechSlice, \"m+m0/zp4zshDxsdAJdrwlQa7s7k=\");\n_c = SpeechSlice;\nexport default SpeechSlice;\nvar _c;\n$RefreshReg$(_c, \"SpeechSlice\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SpeechSlice","_s","text","setText","translatedText","setTranslatedText","sourceLang","setSourceLang","targetLang","setTargetLang","isListening","setIsListening","recognition","setRecognition","window","SpeechRecognition","webkitSpeechRecognition","newRecognition","continuous","interimResults","onresult","event","currentText","results","resultIndex","transcript","onerror","console","error","alert","startListening","start","stopListening","stop","translateText","response","fetch","method","body","JSON","stringify","q","source","target","headers","data","json","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","rows","cols","value","onChange","e","placeholder","_c","$RefreshReg$"],"sources":["E:/personal Applications/speach to text converter/speech-to-text-app/src/store/speechSlice.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst SpeechSlice = () => {\r\n  const [text, setText] = useState('');\r\n  const [translatedText, setTranslatedText] = useState('');\r\n  const [sourceLang, setSourceLang] = useState('en'); // Default source language\r\n  const [targetLang, setTargetLang] = useState('es'); // Default target language\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [recognition, setRecognition] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check for browser compatibility\r\n    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\r\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      const newRecognition = new SpeechRecognition();\r\n\r\n      newRecognition.continuous = true; // Keep recognizing speech\r\n      newRecognition.interimResults = true; // Show interim results\r\n\r\n      newRecognition.onresult = (event) => {\r\n        const currentText = event.results[event.resultIndex][0].transcript;\r\n        setText(currentText);\r\n      };\r\n\r\n      newRecognition.onerror = (event) => {\r\n        console.error('Speech recognition error:', event.error);\r\n      };\r\n\r\n      setRecognition(newRecognition);\r\n    } else {\r\n      alert('Speech recognition is not supported in your browser.');\r\n    }\r\n  }, []);\r\n\r\n  const startListening = () => {\r\n    if (recognition) {\r\n      recognition.start();\r\n      setIsListening(true);\r\n    }\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognition) {\r\n      recognition.stop();\r\n      setIsListening(false);\r\n    }\r\n  };\r\n\r\n  const translateText = async () => {\r\n    if (!text) return; // Do not translate if there's no text\r\n\r\n    try {\r\n      const response = await fetch('https://libretranslate.com/translate', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          q: text,\r\n          source: sourceLang,\r\n          target: targetLang,\r\n        }),\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n\r\n      const data = await response.json();\r\n      setTranslatedText(data.translatedText);\r\n    } catch (error) {\r\n      console.error('Error translating text:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>SpeechSlice - Speech to Translate</h1>\r\n      <button onClick={isListening ? stopListening : startListening}>\r\n        {isListening ? 'Stop Listening' : 'Start Listening'}\r\n      </button>\r\n      <textarea\r\n        rows=\"4\"\r\n        cols=\"50\"\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n        placeholder=\"Spoken text will appear here\"\r\n      />\r\n      <br />\r\n      <button onClick={translateText}>Translate</button>\r\n      <h2>Translated Text:</h2>\r\n      <p>{translatedText}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechSlice;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}